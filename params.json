{
  "name": "Tiny-stack",
  "tagline": "Stack implementation in C for storing objects",
  "body": "# tiny-stack\r\nStack implementation in C for storing objects\r\n\r\n# Introduction\r\n\r\nTiny stack is the C code for storing and retrieving objects by **first in last \r\nout** oder. The stack stores varying objects size. Tiny stack stores both \r\nobject data and length. The objects are copied to the stack byte by byte.\r\n\r\nTiny stack provides two API's\r\n\r\n1. API to Push and Pop object by passing pointer of the data object\r\n2. API to Push and Pop object by getting pointer to the data object.\r\n\r\n# Example\r\n\r\n## Initialize Stack.\r\n\r\n```\r\n\ttinyStack_t test_stack; // Test stack object.\r\n\tuint8_t stack_buffer[4096]; // Stack buffer. \r\n\t\r\n\t// Initialize the Stack.\r\n\ttinyStackSetUp(&test_stack,stack_buffer,sizeof(stack_buffer));\r\n```\r\n\r\n## Pushing Object to Stack.\r\n\r\n\r\n```\r\n\t/* METHOD 1: By passing data pointer */\r\n\r\n\tint data = 234324;\r\n\ttinyStackPush(&test_stack,(uint8_t*)&data,sizeof(int));\r\n```\r\n\r\n\r\n```\r\n\t/* METHOD 2: By getting data pointer */\r\n\r\n\tuint8_t *data_ptr;int data;\r\n\t// Get the buffer of size of INT.\r\n\tdata_ptr = tinyStackTakeBuffer(&test_stack,sizeof(int));\r\n\t// Copy the data to the buffer.\r\n\tdata = 234324;\r\n\tmemcpy(data_ptr,&data,sizeof(int));\r\n\r\n```\r\n\r\n## Retrieving object from Stack.\r\n\r\n\r\n```\r\n\t/* METHOD 1: By passing data pointer */\r\n\t\r\n\tint data;\r\n\ttinyStackPop(&test_stack,(uint8_t*)&data,sizeof(int));\r\n\r\n```\r\n\r\n\r\n```\r\n\t/* METHOD 2: By getting data pointer */\r\n\r\n\tuint8_t *data_ptr;uint16_t length;\r\n\tint data;\r\n\t// Get the buffer present at the top of the stack.\r\n\tdata_ptr = tinyStackGetTopBuffer(&test_stack,&length);\r\n\t// Copy the data.\r\n\tmemcpy(&data,data_ptr,sizeof(int));\r\n\t// Give the buffer to stack.\r\n\ttinyStackGiveBuffer(&test_stack);\r\n\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}